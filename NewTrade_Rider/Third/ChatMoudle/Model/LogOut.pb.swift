// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: LogOut.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// 退出登录
struct LogOutMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///社交id
  var scID: Int64 = 0

  ///终端
  var terminal: LogOutMessage.ClientType = .pc

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ClientType: SwiftProtobuf.Enum {
    typealias RawValue = Int

    ///电脑端
    case pc // = 0

    ///app端
    case app // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .pc
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .pc
      case 1: self = .app
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .pc: return 0
      case .app: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension LogOutMessage.ClientType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [LogOutMessage.ClientType] = [
    .pc,
    .app,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension LogOutMessage: @unchecked Sendable {}
extension LogOutMessage.ClientType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf"

extension LogOutMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogOutMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "sc_id"),
    3: .same(proto: "terminal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.scID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.terminal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.scID != 0 {
      try visitor.visitSingularInt64Field(value: self.scID, fieldNumber: 2)
    }
    if self.terminal != .pc {
      try visitor.visitSingularEnumField(value: self.terminal, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LogOutMessage, rhs: LogOutMessage) -> Bool {
    if lhs.scID != rhs.scID {return false}
    if lhs.terminal != rhs.terminal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LogOutMessage.ClientType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PC"),
    1: .same(proto: "APP"),
  ]
}
