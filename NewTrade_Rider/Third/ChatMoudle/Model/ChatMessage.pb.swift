// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ChatMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///消息体
struct ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///发送者
  var sender: Int64 = 0

  ///会话id
  var sessionID: String = String()

  ///消息id
  var msgID: String = String()

  ///消息内容
  var msgContent: String = String()

  ///发送时间
  var sendTime: Int64 = 0

  ///消息类型
  var type: ChatMessage.MessageType = .text

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum MessageType: SwiftProtobuf.Enum {
    typealias RawValue = Int

    ///1=文本
    case text // = 0

    ///2=图片
    case image // = 1

    ///3=语音
    case voice // = 2

    ///4=视频
    case video // = 3

    ///5=文件
    case file // = 4

    ///6=表情
    case emotion // = 5

    ///7=链接
    case link // = 6

    ///8=位置
    case location // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .text
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .text
      case 1: self = .image
      case 2: self = .voice
      case 3: self = .video
      case 4: self = .file
      case 5: self = .emotion
      case 6: self = .link
      case 7: self = .location
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .text: return 0
      case .image: return 1
      case .voice: return 2
      case .video: return 3
      case .file: return 4
      case .emotion: return 5
      case .link: return 6
      case .location: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension ChatMessage.MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [ChatMessage.MessageType] = [
    .text,
    .image,
    .voice,
    .video,
    .file,
    .emotion,
    .link,
    .location,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension ChatMessage: @unchecked Sendable {}
extension ChatMessage.MessageType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf"

extension ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "msg_id"),
    4: .standard(proto: "msg_content"),
    6: .standard(proto: "send_time"),
    7: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.msgID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.msgContent) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.sendTime) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sender != 0 {
      try visitor.visitSingularInt64Field(value: self.sender, fieldNumber: 1)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 2)
    }
    if !self.msgID.isEmpty {
      try visitor.visitSingularStringField(value: self.msgID, fieldNumber: 3)
    }
    if !self.msgContent.isEmpty {
      try visitor.visitSingularStringField(value: self.msgContent, fieldNumber: 4)
    }
    if self.sendTime != 0 {
      try visitor.visitSingularInt64Field(value: self.sendTime, fieldNumber: 6)
    }
    if self.type != .text {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ChatMessage, rhs: ChatMessage) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.msgID != rhs.msgID {return false}
    if lhs.msgContent != rhs.msgContent {return false}
    if lhs.sendTime != rhs.sendTime {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChatMessage.MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXT"),
    1: .same(proto: "IMAGE"),
    2: .same(proto: "VOICE"),
    3: .same(proto: "VIDEO"),
    4: .same(proto: "FILE"),
    5: .same(proto: "EMOTION"),
    6: .same(proto: "LINK"),
    7: .same(proto: "LOCATION"),
  ]
}
