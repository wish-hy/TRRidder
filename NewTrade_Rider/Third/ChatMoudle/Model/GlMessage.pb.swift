// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: GlMessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///消息体
struct GlMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///消息id
  var msgID: String = String()

  ///发送时间
  ///    google.protobuf.Timestamp send_time = 2;
  var sendTime: Int64 = 0

  ///校验位
  var check: String = String()

  ///类型
  var type: GlMessage.MessageType = .heartbeat

  ///是否是请求，true=请求 false=响应
  var hasReq_p: Bool = false

  ///消息体
  var content: GlMessage.OneOf_Content? = nil

  var loginMessage: LoginMessage {
    get {
      if case .loginMessage(let v)? = content {return v}
      return LoginMessage()
    }
    set {content = .loginMessage(newValue)}
  }

  var chatMessage: ChatMessage {
    get {
      if case .chatMessage(let v)? = content {return v}
      return ChatMessage()
    }
    set {content = .chatMessage(newValue)}
  }

  var respMessage: ResponseMessage {
    get {
      if case .respMessage(let v)? = content {return v}
      return ResponseMessage()
    }
    set {content = .respMessage(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///消息体
  enum OneOf_Content: Equatable {
    case loginMessage(LoginMessage)
    case chatMessage(ChatMessage)
    case respMessage(ResponseMessage)

  #if !swift(>=4.1)
    static func ==(lhs: Protobuf_Message.OneOf_Content, rhs: Protobuf_Message.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loginMessage, .loginMessage): return {
        guard case .loginMessage(let l) = lhs, case .loginMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.chatMessage, .chatMessage): return {
        guard case .chatMessage(let l) = lhs, case .chatMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.respMessage, .respMessage): return {
        guard case .respMessage(let l) = lhs, case .respMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  ///消息类型
  enum MessageType: SwiftProtobuf.Enum {
    typealias RawValue = Int

    ///心跳
    case heartbeat // = 0

    ///登录
    case login // = 1

    ///发送聊天信息
    case chatMessage // = 2

    ///响应消息
    case respMsg // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .heartbeat
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .heartbeat
      case 1: self = .login
      case 2: self = .chatMessage
      case 3: self = .respMsg
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .heartbeat: return 0
      case .login: return 1
      case .chatMessage: return 2
      case .respMsg: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension GlMessage.MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [GlMessage.MessageType] = [
    .heartbeat,
    .login,
    .chatMessage,
    .respMsg,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension GlMessage: @unchecked Sendable {}
extension GlMessage.OneOf_Content: @unchecked Sendable {}
extension GlMessage.MessageType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf"

extension GlMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "msg_id"),
    2: .standard(proto: "send_time"),
    3: .same(proto: "check"),
    4: .same(proto: "type"),
    5: .standard(proto: "has_req"),
    11: .standard(proto: "login_message"),
    12: .standard(proto: "chat_message"),
    13: .standard(proto: "resp_message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.msgID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.sendTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.check) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.hasReq_p) }()
      case 11: try {
        var v: LoginMessage?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .loginMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .loginMessage(v)
        }
      }()
      case 12: try {
        var v: ChatMessage?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .chatMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .chatMessage(v)
        }
      }()
      case 13: try {
        var v: ResponseMessage?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .respMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .respMessage(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.msgID.isEmpty {
      try visitor.visitSingularStringField(value: self.msgID, fieldNumber: 1)
    }
    if self.sendTime != 0 {
      try visitor.visitSingularInt64Field(value: self.sendTime, fieldNumber: 2)
    }
    if !self.check.isEmpty {
      try visitor.visitSingularStringField(value: self.check, fieldNumber: 3)
    }
    if self.type != .heartbeat {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    if self.hasReq_p != false {
      try visitor.visitSingularBoolField(value: self.hasReq_p, fieldNumber: 5)
    }
    switch self.content {
    case .loginMessage?: try {
      guard case .loginMessage(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .chatMessage?: try {
      guard case .chatMessage(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .respMessage?: try {
      guard case .respMessage(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GlMessage, rhs: GlMessage) -> Bool {
    if lhs.msgID != rhs.msgID {return false}
    if lhs.sendTime != rhs.sendTime {return false}
    if lhs.check != rhs.check {return false}
    if lhs.type != rhs.type {return false}
    if lhs.hasReq_p != rhs.hasReq_p {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GlMessage.MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEARTBEAT"),
    1: .same(proto: "LOGIN"),
    2: .same(proto: "CHAT_MESSAGE"),
    3: .same(proto: "RESP_MSG"),
  ]
}
